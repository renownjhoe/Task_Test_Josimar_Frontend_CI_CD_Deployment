name: Deploy React App

on:
  push:
    branches:
      - main

env:
  SERVER_HOST: ${{ secrets.EC2_HOST }}
  SERVER_USER: ${{ secrets.EC2_USERNAME }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/react-app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add server public key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_PEM_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Get short Git commit ID
        run: echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.COMMIT_ID }} .
          docker push ${{ env.IMAGE_NAME }}:${{ env.COMMIT_ID }}

      - name: Clean up old Docker containers
        run: |
          ssh -T -i private_key.pem ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null
            then
              echo "Docker could not be found, installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker $USER
              newgrp docker
            fi
            mkdir -p /home/ubuntu/Task_Test_Josimar_Frontend_CI_CD_Deployment
            cd /home/ubuntu/Task_Test_Josimar_Frontend_CI_CD_Deployment
            docker compose down || true
            docker system prune -af -f || true
          EOF

      - name: Deploy to EC2
        run: |
          ssh -T -i private_key.pem ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
            set -x
            cd /home/ubuntu/Task_Test_Josimar_Frontend_CI_CD_Deployment || mkdir -p /home/ubuntu/Task_Test_Josimar_Frontend_CI_CD_Deployment
            cd /home/ubuntu/Task_Test_Josimar_Frontend_CI_CD_Deployment
            git init || true
            git remote add origin https://github.com/renownjhoe/Task_Test_Josimar_Frontend_CI_CD_Deployment.git || true
            git fetch || true
            git checkout main || true
            git pull origin main || true
            docker compose down || true
            docker compose up -d || { echo "docker compose up failed"; exit 1; }
            docker network ls
            docker network inspect app-network
            docker ps
          EOF

      - name: Clean up SSH private key
        run: |
          rm -f private_key.pem
        if: always()

      - name: Clean up known_hosts file
        run: |
          rm -f ~/.ssh/known_hosts
        if: always()

      - name: Maintenance Check
        run: |
          ssh -T -i private_key.pem ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
            set -x
            echo "Performing maintenance check..."
            sleep 10
            docker logs prometheus || true
            docker logs grafana || true
            echo "Maintenance check successful!"
          EOF

  monitoring_check:
    name: Verify Monitoring Services
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Add server public key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts # Corrected variable
          chmod 644 ~/.ssh/known_hosts

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_PEM_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Check Prometheus Service
        run: |
          ssh -T -i private_key.pem ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF' # Corrected variable
            set -x
            cd /home/ubuntu/Task_Test_Josimar_Frontend_CI_CD_Deployment
            echo "Checking if Prometheus is running..."
            docker logs prometheus || true
          EOF

      - name: Check Grafana Service
        run: |
          ssh -T -i private_key.pem ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF' # Corrected variable
            set -x
            cd /home/ubuntu/Task_Test_Josimar_Frontend_CI_CD_Deployment
            echo "Checking if Grafana is running..."
            docker logs grafana || true
          EOF